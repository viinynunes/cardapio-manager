// Mocks generated by Mockito 5.3.0 from annotations
// in cardapio_manager/test/src/modules/menu/infra/datasources/mock_datasources.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cardapio_manager/src/modules/core/weekday/domain/entities/weekday.dart'
    as _i5;
import 'package:cardapio_manager/src/modules/menu/infra/datasources/i_item_menu_datasource.dart'
    as _i3;
import 'package:cardapio_manager/src/modules/menu/infra/models/item_menu_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeItemMenuModel_0 extends _i1.SmartFake implements _i2.ItemMenuModel {
  _FakeItemMenuModel_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [IItemMenuDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIItemMenuDatasource extends _i1.Mock
    implements _i3.IItemMenuDatasource {
  MockIItemMenuDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ItemMenuModel> create(_i2.ItemMenuModel? item) =>
      (super.noSuchMethod(Invocation.method(#create, [item]),
          returnValue: _i4.Future<_i2.ItemMenuModel>.value(_FakeItemMenuModel_0(
              this, Invocation.method(#create, [item])))) as _i4
          .Future<_i2.ItemMenuModel>);
  @override
  _i4.Future<_i2.ItemMenuModel> update(_i2.ItemMenuModel? item) =>
      (super.noSuchMethod(Invocation.method(#update, [item]),
          returnValue: _i4.Future<_i2.ItemMenuModel>.value(_FakeItemMenuModel_0(
              this, Invocation.method(#update, [item])))) as _i4
          .Future<_i2.ItemMenuModel>);
  @override
  _i4.Future<bool> disable(String? id) =>
      (super.noSuchMethod(Invocation.method(#disable, [id]),
          returnValue: _i4.Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<List<_i2.ItemMenuModel>> findByWeekday(_i5.Weekday? weekday) =>
      (super.noSuchMethod(Invocation.method(#findByWeekday, [weekday]),
          returnValue: _i4.Future<List<_i2.ItemMenuModel>>.value(
              <_i2.ItemMenuModel>[])) as _i4.Future<List<_i2.ItemMenuModel>>);
  @override
  _i4.Future<List<_i2.ItemMenuModel>> findAllEnabled() => (super.noSuchMethod(
          Invocation.method(#findAllEnabled, []),
          returnValue:
              _i4.Future<List<_i2.ItemMenuModel>>.value(<_i2.ItemMenuModel>[]))
      as _i4.Future<List<_i2.ItemMenuModel>>);
  @override
  _i4.Future<List<_i2.ItemMenuModel>> findAllDisabled() => (super.noSuchMethod(
          Invocation.method(#findAllDisabled, []),
          returnValue:
              _i4.Future<List<_i2.ItemMenuModel>>.value(<_i2.ItemMenuModel>[]))
      as _i4.Future<List<_i2.ItemMenuModel>>);
}
