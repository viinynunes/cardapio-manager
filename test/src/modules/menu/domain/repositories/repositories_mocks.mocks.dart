// Mocks generated by Mockito 5.3.0 from annotations
// in cardapio_manager/test/src/modules/menu/domain/repositories/repositories_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cardapio_manager/src/modules/core/weekday/domain/entities/weekday.dart'
    as _i7;
import 'package:cardapio_manager/src/modules/menu/domain/entities/item_menu.dart'
    as _i6;
import 'package:cardapio_manager/src/modules/menu/domain/repositories/i_item_menu_repository.dart'
    as _i3;
import 'package:cardapio_manager/src/modules/menu/errors/item_menu_errors.dart'
    as _i5;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [IItemMenuRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIItemMenuRepository extends _i1.Mock
    implements _i3.IItemMenuRepository {
  MockIItemMenuRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.ItemMenuError, _i6.ItemMenu>> create(
          _i6.ItemMenu? item) =>
      (super.noSuchMethod(Invocation.method(#create, [item]),
              returnValue:
                  _i4.Future<_i2.Either<_i5.ItemMenuError, _i6.ItemMenu>>.value(
                      _FakeEither_0<_i5.ItemMenuError, _i6.ItemMenu>(
                          this, Invocation.method(#create, [item]))))
          as _i4.Future<_i2.Either<_i5.ItemMenuError, _i6.ItemMenu>>);
  @override
  _i4.Future<_i2.Either<_i5.ItemMenuError, _i6.ItemMenu>> update(
          _i6.ItemMenu? item) =>
      (super.noSuchMethod(Invocation.method(#update, [item]),
              returnValue:
                  _i4.Future<_i2.Either<_i5.ItemMenuError, _i6.ItemMenu>>.value(
                      _FakeEither_0<_i5.ItemMenuError, _i6.ItemMenu>(
                          this, Invocation.method(#update, [item]))))
          as _i4.Future<_i2.Either<_i5.ItemMenuError, _i6.ItemMenu>>);
  @override
  _i4.Future<_i2.Either<_i5.ItemMenuError, bool>> disable(String? id) =>
      (super.noSuchMethod(Invocation.method(#disable, [id]),
          returnValue: _i4.Future<_i2.Either<_i5.ItemMenuError, bool>>.value(
              _FakeEither_0<_i5.ItemMenuError, bool>(
                  this, Invocation.method(#disable, [id])))) as _i4
          .Future<_i2.Either<_i5.ItemMenuError, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.ItemMenuError, List<_i6.ItemMenu>>> findByWeekday(
          _i7.Weekday? weekday) =>
      (super.noSuchMethod(Invocation.method(#findByWeekday, [weekday]),
          returnValue:
              _i4.Future<_i2.Either<_i5.ItemMenuError, List<_i6.ItemMenu>>>.value(
                  _FakeEither_0<_i5.ItemMenuError, List<_i6.ItemMenu>>(this,
                      Invocation.method(#findByWeekday, [weekday])))) as _i4
          .Future<_i2.Either<_i5.ItemMenuError, List<_i6.ItemMenu>>>);
  @override
  _i4.Future<_i2.Either<_i5.ItemMenuError, List<_i6.ItemMenu>>>
      findAllEnabled() => (super.noSuchMethod(
          Invocation.method(#findAllEnabled, []),
          returnValue:
              _i4.Future<_i2.Either<_i5.ItemMenuError, List<_i6.ItemMenu>>>.value(
                  _FakeEither_0<_i5.ItemMenuError, List<_i6.ItemMenu>>(
                      this, Invocation.method(#findAllEnabled, [])))) as _i4
          .Future<_i2.Either<_i5.ItemMenuError, List<_i6.ItemMenu>>>);
  @override
  _i4.Future<_i2.Either<_i5.ItemMenuError, List<_i6.ItemMenu>>>
      findAllDisabled() => (super.noSuchMethod(
          Invocation.method(#findAllDisabled, []),
          returnValue:
              _i4.Future<_i2.Either<_i5.ItemMenuError, List<_i6.ItemMenu>>>.value(
                  _FakeEither_0<_i5.ItemMenuError, List<_i6.ItemMenu>>(
                      this, Invocation.method(#findAllDisabled, [])))) as _i4
          .Future<_i2.Either<_i5.ItemMenuError, List<_i6.ItemMenu>>>);
}
